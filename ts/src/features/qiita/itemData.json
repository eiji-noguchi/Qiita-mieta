[
    {
        "rendered_body": "\n<h1>\n<span id=\"目的\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>目的</h1>\n\n<p>anacondaの仮想環境内でtesseractとPyOCRを使い、画像から文字を認識できるようにします。<br>\n今回は画像の文字を認識し、ターミナルへ出力できるところまでの行います。</p>\n\n<p>こんな感じ↓<br>\n<a href=\"https://camo.qiitausercontent.com/71996e634d950fd17c33298cbccd7aec73f3f962/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3632313833382f62646533336339372d376534392d356363362d396138302d3663653765666135663631312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F621838%2Fbde33c97-7e49-5cc6-9a80-6ce7efa5f611.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=42d27bae301891fc3dcf8701b8154f37\" alt=\"mokuteki.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/621838/bde33c97-7e49-5cc6-9a80-6ce7efa5f611.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F621838%2Fbde33c97-7e49-5cc6-9a80-6ce7efa5f611.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9127809f4a0d177fce2ff585ed2fb843 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<p>python 3.6<br>\ntesseract 4.1.1<br>\nPyOCR 0.8</p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<h3>\n<span id=\"ツールのインストール\" class=\"fragment\"></span><a href=\"#%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>ツールのインストール</h3>\n\n<p>anacondaの仮想環境に下記2つをインストールします。</p>\n\n<p>・文字認識のためのOCRエンジンである<code>Tesseract OCR</code>をインストール<br>\n<a href=\"https://anaconda.org/conda-forge/tesseract\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://anaconda.org/conda-forge/tesseract</a></p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"go\">conda install -c conda-forge tesseract\n</span></code></pre></div></div>\n\n<p>・PythonからOCRエンジンを使用するための<code>PyOCR</code>をインストール<br>\n<a href=\"https://anaconda.org/conda-forge/pyocr\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://anaconda.org/conda-forge/pyocr</a></p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"go\">conda install -c conda-forge pyocr\n</span></code></pre></div></div>\n\n<h3>\n<span id=\"文字認識を試す\" class=\"fragment\"></span><a href=\"#%E6%96%87%E5%AD%97%E8%AA%8D%E8%AD%98%E3%82%92%E8%A9%A6%E3%81%99\"><i class=\"fa fa-link\"></i></a>文字認識を試す</h3>\n\n<p>確認用にテスト用の画像を準備します（ファイル名は<code>moji_en.png</code>としています）。<br>\n※デフォルトは日本語未対応です。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/05fa885c97ea3f08b98e2750402d66c9e037373c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3632313833382f65323437666232392d663335382d333836632d616461362d3165356462623032633431392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F621838%2Fe247fb29-f358-386c-ada6-1e5dbb02c419.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=006bc879dc49f760e0ebba243965ce26\" alt=\"moji_en.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/621838/e247fb29-f358-386c-ada6-1e5dbb02c419.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F621838%2Fe247fb29-f358-386c-ada6-1e5dbb02c419.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6785c35e993a8bab326bb9229dbb7b02 1x\" loading=\"lazy\"></a></p>\n\n<p>pythonコードは以下になります。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyocr</span>\n\n<span class=\"c1\"># OCRエンジンを取得\n</span><span class=\"n\">engines</span> <span class=\"o\">=</span> <span class=\"n\">pyocr</span><span class=\"p\">.</span><span class=\"n\">get_available_tools</span><span class=\"p\">()</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">engines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># 画像の文字を読み込む\n</span><span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">image_to_string</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'moji_en.png'</span><span class=\"p\">),</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s\">\"eng\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">)</span> <span class=\"c1\"># 「Test Message」が出力される\n</span></code></pre></div></div>\n\n<p>実行結果に画像内のテキストが出力されていればOKです。</p>\n\n<h3>\n<span id=\"日本語対応化\" class=\"fragment\"></span><a href=\"#%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%AF%BE%E5%BF%9C%E5%8C%96\"><i class=\"fa fa-link\"></i></a>日本語対応化</h3>\n\n<p>次に、日本語も認識できるようにします。<br>\n下記から言語ファイル<code>jpn.traineddata</code>ダウンロードします。<br>\n<a href=\"https://github.com/tesseract-ocr/tessdata\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/tesseract-ocr/tessdata</a></p>\n\n<p>ダウンロードした言語ファイルをanacondaの仮想環境にある指定の場所へ配置してください。<br>\n配置先：<code>C:\\Users\\user\\anaconda3\\envs\\\u0026lt;仮想環境名&gt;\\Library\\bin\\tessdata\\\u003c/code></p>\n\n<p>言語ファイルを配置したら、pythonコードの<code>engine.image_to_string()</code>の第2引数を<code>lang=\"jpn\"</code>のように修正します。<br>\nついでに対応言語も出力しておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyocr</span>\n\n<span class=\"c1\"># OCRエンジンを取得\n</span><span class=\"n\">engines</span> <span class=\"o\">=</span> <span class=\"n\">pyocr</span><span class=\"p\">.</span><span class=\"n\">get_available_tools</span><span class=\"p\">()</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">engines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># 対応言語取得\n</span><span class=\"n\">langs</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">get_available_languages</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"対応言語:\"</span><span class=\"p\">,</span><span class=\"n\">langs</span><span class=\"p\">)</span> <span class=\"c1\"># ['eng', 'jpn', 'osd']\n</span>\n<span class=\"c1\"># 画像の文字を読み込む\n</span><span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">image_to_string</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'jugemu.png'</span><span class=\"p\">),</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s\">\"jpn\"</span><span class=\"p\">)</span> <span class=\"c1\"># 修正点：lang=\"eng\" -&gt; lang=\"jpn\"\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>これで日本語化は完了です。<br>\n動作確認してみましょう。使う画像はみんな大好き寿限無です。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a2de9de760b3f41e18c5054e309b0750afa7e51a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3632313833382f63323962643433342d383735662d663038662d373336312d6663356364633434313163392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F621838%2Fc29bd434-875f-f08f-7361-fc5cdc4411c9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=15daf50a9a3ca835288b102deb7c30b2\" alt=\"jugemu.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/621838/c29bd434-875f-f08f-7361-fc5cdc4411c9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F621838%2Fc29bd434-875f-f08f-7361-fc5cdc4411c9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=05849abb0e0b33534a721f485aedd6b5 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><code><span class=\"go\">対応言語: ['eng', 'jpn', 'osd']\n寿 限 無 寿 限 無 五 劫 の す り き れ\n\n海 砂 利 水 魚 の 水 行 末 雲 来 末 風 来 末\n\n食 う 寝 る と こ ろ に 住 む と こ ろ\n\nや ぶ ら 小 路 の ぶ ら 小 路\n\nパ イ ポ パ イ ポ パ イ ポ の シ ュ ー リ ン ガ ン\n\nシ ュ ー リ ン ガ ン の ク ー リ ン ダ イ\n\nク ー リ ン ダ イ の ポ ン ポ コ ナ ー の ポ ン ポ コ ピ ー の 長 久 命 の 長 助\n\n</span></code></pre></div></div>\n\n<p>対応言語に<code>jpn</code>が含まれており、出力も問題なさそうですね。<br>\nちなみに<code>osd</code>は文字の識別を行うための特殊ファイルみたいなものです。</p>\n\n<h1>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h1>\n\n<p>pythonのツールと数行のコードだけで画像から文字を認識することが出来ました。<br>\n日本語対応なども一度設定してしまえばOKなので、低コストでここまで出来るのは素晴らしいです。<br>\nデータ入力の自動化など、様々なことに応用できそうですね。</p>\n",
        "body": "# 目的\nanacondaの仮想環境内でtesseractとPyOCRを使い、画像から文字を認識できるようにします。\n今回は画像の文字を認識し、ターミナルへ出力できるところまでの行います。\n\nこんな感じ↓\n![mokuteki.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/621838/bde33c97-7e49-5cc6-9a80-6ce7efa5f611.png)\n\n\n\n# 環境\npython 3.6\ntesseract 4.1.1\nPyOCR 0.8\n\n# 手順\n### ツールのインストール\nanacondaの仮想環境に下記2つをインストールします。\n\n・文字認識のためのOCRエンジンである`Tesseract OCR`をインストール\nhttps://anaconda.org/conda-forge/tesseract\n\n```terminal\nconda install -c conda-forge tesseract\n```\n\n・PythonからOCRエンジンを使用するための`PyOCR`をインストール\nhttps://anaconda.org/conda-forge/pyocr\n\n```terminal\nconda install -c conda-forge pyocr\n```\n\n### 文字認識を試す\n確認用にテスト用の画像を準備します（ファイル名は`moji_en.png`としています）。\n※デフォルトは日本語未対応です。\n\n![moji_en.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/621838/e247fb29-f358-386c-ada6-1e5dbb02c419.png)\n\npythonコードは以下になります。\n\n```python\nfrom PIL import Image\nimport pyocr\n\n# OCRエンジンを取得\nengines = pyocr.get_available_tools()\nengine = engines[0]\n\n# 画像の文字を読み込む\ntxt = engine.image_to_string(Image.open('moji_en.png'), lang=\"eng\")\nprint(txt) # 「Test Message」が出力される\n```\n\n実行結果に画像内のテキストが出力されていればOKです。\n\n\n\n### 日本語対応化\n次に、日本語も認識できるようにします。\n下記から言語ファイル`jpn.traineddata`ダウンロードします。\nhttps://github.com/tesseract-ocr/tessdata\n\nダウンロードした言語ファイルをanacondaの仮想環境にある指定の場所へ配置してください。\n配置先：`C:\\Users\\user\\anaconda3\\envs\\\u003c仮想環境名>\\Library\\bin\\tessdata\\`\n\n\n言語ファイルを配置したら、pythonコードの`engine.image_to_string()`の第2引数を`lang=\"jpn\"`のように修正します。\nついでに対応言語も出力しておきます。\n\n```python\nfrom PIL import Image\nimport pyocr\n\n# OCRエンジンを取得\nengines = pyocr.get_available_tools()\nengine = engines[0]\n\n# 対応言語取得\nlangs = engine.get_available_languages()\nprint(\"対応言語:\",langs) # ['eng', 'jpn', 'osd']\n\n# 画像の文字を読み込む\ntxt = engine.image_to_string(Image.open('jugemu.png'), lang=\"jpn\") # 修正点：lang=\"eng\" -> lang=\"jpn\"\nprint(txt)\n```\n\nこれで日本語化は完了です。\n動作確認してみましょう。使う画像はみんな大好き寿限無です。\n\n![jugemu.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/621838/c29bd434-875f-f08f-7361-fc5cdc4411c9.png)\n\n```terminal\n対応言語: ['eng', 'jpn', 'osd']\n寿 限 無 寿 限 無 五 劫 の す り き れ\n\n海 砂 利 水 魚 の 水 行 末 雲 来 末 風 来 末\n\n食 う 寝 る と こ ろ に 住 む と こ ろ\n\nや ぶ ら 小 路 の ぶ ら 小 路\n\nパ イ ポ パ イ ポ パ イ ポ の シ ュ ー リ ン ガ ン\n\nシ ュ ー リ ン ガ ン の ク ー リ ン ダ イ\n\nク ー リ ン ダ イ の ポ ン ポ コ ナ ー の ポ ン ポ コ ピ ー の 長 久 命 の 長 助\n\n```\n\n対応言語に`jpn`が含まれており、出力も問題なさそうですね。\nちなみに`osd`は文字の識別を行うための特殊ファイルみたいなものです。\n\n# まとめ\npythonのツールと数行のコードだけで画像から文字を認識することが出来ました。\n日本語対応なども一度設定してしまえばOKなので、低コストでここまで出来るのは素晴らしいです。\nデータ入力の自動化など、様々なことに応用できそうですね。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2021-07-28T18:28:42+09:00",
        "group": null,
        "id": "c19c1e125eaa87c3616b",
        "likes_count": 116,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Python",
                "versions": []
            },
            {
                "name": "Python3",
                "versions": []
            },
            {
                "name": "tesseract-ocr",
                "versions": []
            },
            {
                "name": "Anaconda",
                "versions": []
            },
            {
                "name": "pyocr",
                "versions": []
            }
        ],
        "title": "PythonとOCRエンジンで画像から文字を認識する",
        "updated_at": "2021-07-28T18:28:42+09:00",
        "url": "https://qiita.com/eiji-noguchi/items/c19c1e125eaa87c3616b",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 0,
            "followers_count": 10,
            "github_login_name": "eiji-noguchi",
            "id": "eiji-noguchi",
            "items_count": 14,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 621838,
            "profile_image_url": "https://avatars2.githubusercontent.com/u/47212373?v=4",
            "team_only": false,
            "twitter_screen_name": null,
            "website_url": null
        },
        "page_views_count": null,
        "team_membership": null
    }
]